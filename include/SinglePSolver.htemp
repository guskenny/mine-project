#ifndef __SinglePSolver_H__
#define __SinglePSolver_H__

#include "SinglePModel.h"
#include "MaxClosureFactory.h"
#include <boost/format.hpp>
#include "QOL/QolMIP.h"
#include "QOL/QolColFormulation.h"
#include "QOL/CplexFormulation.h"
#include "QOL/GurobiFormulation.h"
//#include "QOL/CPBeamACO.h" // needs compilation with boost::thread
#include "QOL/CpuTimer.h"
#include <daten.h>
#include <SinglePModel.h>
#include <cmath>
#include <fstream>
#include <iostream>
#include <iomanip>
//#include <math.h> 

#define CPLEX_T 1
#define GUROBI_T 2

class SinglePSolver{
  private:
    SinglePModel *probModel;
    MaxClosure_Base *MCSolver;
    char MCType;
    int solverType;
    int numPeriods;
    bool solveRelaxed;

  public:
//    SinglePSolver(const Daten &prob);
    SinglePSolver(const Daten &prob);
    SinglePSolver(int argc,const char **argv);
    void initModel(qol::MIPSolver &mip, 
        std::vector<qol::Variable> &x, 
        std::vector<std::vector<qol::Variable> > &y, 
        std::vector<Block> * blocks);
    std::vector<double> getFutureProfit();
    void updateVars(qol::MIPSolver &mip, 
        const std::vector<qol::Variable> &x, 
        const std::vector<std::vector<qol::Variable> > &y, 
        const std::vector<int> &fixed, 
        const std::vector<int> &old_fixed, 
        const std::vector<std::vector<double> > &y_fixed,
        int period);
    std::vector<double> getConstrUse(const qol::MIPSolver &mip);
    void updateConstraints(qol::MIPSolver &mip, 
        const std::vector<double> &constrUse,
        const std::vector<double> &prevUse);
    int solve();
    void setSolverType(int type) {solverType = type;};
    void boundaryDFS(int curr, std::vector<int> &boundary,
        std::vector<int> &visited, 
        const std::vector<int> &sol);
    ~SinglePSolver(){};
    
};

#endif
